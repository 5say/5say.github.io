<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>什么是 RESTful api</title>
    <link href="/2023/06/17/01_%E7%BC%96%E7%A8%8B%E7%9B%B8%E5%85%B3/03_java/2.web/1.%E4%BB%80%E4%B9%88%E6%98%AFRESTful%20api/"/>
    <url>/2023/06/17/01_%E7%BC%96%E7%A8%8B%E7%9B%B8%E5%85%B3/03_java/2.web/1.%E4%BB%80%E4%B9%88%E6%98%AFRESTful%20api/</url>
    
    <content type="html"><![CDATA[<h1 id="一、什么是-api？"><a href="#一、什么是-api？" class="headerlink" title="一、什么是 api？"></a>一、什么是 api？</h1><p>API 是应用程序编程接口，它定义软件系统之间进行通信必须遵循的规则。</p><p>开发人员公开或创建 API，以便他们的应用程序可以以编程方式与其他应用程序进行通信。</p><p>例如，工时单应用程序公开一个要求提供员工全名和日期范围的 API。当其收到此信息时，其会对员工的工时单进行内部处理，并返回该日期范围内的工作小时数。</p><p>您可以将 Web API 想象为客户端和 Web 上资源之间的大门。</p><p><strong>客户端</strong> </p><p>客户端是要访问 Web 上信息的用户。客户端可以是使用 API 的个人或软件系统。 </p><p>例如，开发人员可以编写从天气系统访问天气数据的程序。或者，您可以在浏览器上直接访问天气网站访问相同的数据。</p><p><strong>资源</strong> </p><p>资源是不同的应用程序向其客户端提供的信息。资源可以是图像、视频、文本、数字或任何类型的数据。向客户端提供资源的设备也称为服务器。企业使用 API 分享资源，既能提供 Web 服务，还能确保安全、可控，身份验证。此外，API 帮助企业确定哪些客户端可以访问特定的内部资源。</p><h1 id="二、什么是-REST？"><a href="#二、什么是-REST？" class="headerlink" title="二、什么是 REST？"></a>二、什么是 REST？</h1><p>表征状态传输 (REST) 是一种软件架构，决定了 API 的工作条件。</p><p>REST 最初作为管理复杂网络（例如互联网）上的通信的指南而建立。您可以使用基于 REST 的架构为高性能和可靠的大规模通信提供支持。您可以轻松应用和修改此种架构，为任何 API 系统带来可见性和跨平台可能性。</p><p>API 开发人员可以使用多种不同的架构设计 API。遵循 REST 架构风格的 API 称为 REST API。实施 REST 架构的 Web 服务称为 RESTful Web 服务。术语 RESTful API 通常指 RESTful Web API。但是，术语 REST API 和 RESTful API 可以互换使用。</p><p>以下是 REST 架构风格的一些原则：</p><h2 id="1-统一接口"><a href="#1-统一接口" class="headerlink" title="1.统一接口"></a>1.统一接口</h2><p>统一接口是一切 RESTful Web 服务设计的基础。其表示服务器以标准格式传输信息。格式化的资源在 REST 中称为表征。此格式可以与服务器应用程序上资源的内部表征不同。例如，服务器可以将数据存储为文本，但以 HTML 表征格式发送该数据。</p><p><strong>统一接口强制实施四个架构约束：</strong></p><p>请求应确定资源。它们通过使用统一的资源标识符实现此功能。<br>客户端包含资源表征中的足够信息以修改或删除资源（如需要）。服务器通过发送进一步描述资源的元数据以符合这一条件。<br>客户端接收有关如何进一步处理表征的信息。服务器通过发送自描述信息实现此功能，该信息包含了有关客户端如何以最佳方式使用这些信息的元数据。<br>客户端接收有关其完成任务需要的所有其他相关资源的信息。服务器通过在表征中发送超链接实现此功能，以便客户端可以动态发现更多资源。</p><h2 id="2-无状态"><a href="#2-无状态" class="headerlink" title="2.无状态"></a>2.无状态</h2><p>在 REST 架构中，无状态指一种服务器独立于所有之前的请求完成每个客户端请求的通信方法。客户端可以以任意顺序请求资源，每个请求为无状态或与独立于其他请求。此 REST API 设计约束意味着服务器每次可以完全识别和满足请求。 </p><h2 id="3-层次化系统"><a href="#3-层次化系统" class="headerlink" title="3.层次化系统"></a>3.层次化系统</h2><p>在层次化系统架构中，客户端可以连接到客户端和服务器之间的其他授权中间方，其仍将接收来自服务器的响应。服务器也可以将请求传递到其他服务器。您可以将 RESTful Web 服务设计为在包含多个层级（例如安全、应用程序和业务逻辑）的数个服务器上运行，从而共同满足客户端请求。这些层级对客户端仍不可见。</p><h2 id="4-高速缓存能力"><a href="#4-高速缓存能力" class="headerlink" title="4.高速缓存能力"></a>4.高速缓存能力</h2><p>RESTful Web 服务支持缓存，缓存是指将一些响应存储在客户端或中间方上以提高服务器响应时间的流程。例如，假设您访问某个网站，该网站的每个页面都包含通用的页眉和页脚图像。每次您访问新的网站页面时，服务器必须重新发送相同的图像。为了避免出现这种情况，客户端在首次响应后会缓存或存储这些图像，之后直接使用缓存中的图像。RESTful Web 服务通过使用自行定义为可缓存或不可缓存的 API 响应来控制缓存。</p><h2 id="5-按需编码"><a href="#5-按需编码" class="headerlink" title="5.按需编码"></a>5.按需编码</h2><p>在 REST 架构风格中，服务器可以通过将软件编程代码传输到客户端暂时扩展或自定义客户端功能。例如，当您在任何网站上填写注册表单时，浏览器会立即高亮您填写内容的任何错误，例如不正确的电话号码。正是由于服务器发送的代码，浏览器才可以实现这个功能。</p><h1 id="三、什么是-RESTful-api？"><a href="#三、什么是-RESTful-api？" class="headerlink" title="三、什么是 RESTful api？"></a>三、什么是 RESTful api？</h1><p>RESTful API 是两个计算机系统用于通过互联网安全地交换信息的接口。大多数业务应用程序必须与其他内部和第三方应用程序进行通信才能执行各种任务。例如，为了生成月度工资单，您的内部账户系统必须与客户的银行系统共享数据才能自动开具发票并与内部工时单应用程序进行通信。RESTful API 支持此类信息交换，因为它们遵循安全、可靠和高效的软件通信标准。</p><h1 id="四、RESTful-API-有哪些优势？"><a href="#四、RESTful-API-有哪些优势？" class="headerlink" title="四、RESTful API 有哪些优势？"></a>四、RESTful API 有哪些优势？</h1><h1 id="五、RESTful-API-如何工作？"><a href="#五、RESTful-API-如何工作？" class="headerlink" title="五、RESTful API 如何工作？"></a>五、RESTful API 如何工作？</h1><h1 id="六、RESTful-API-客户端请求包含哪些内容？"><a href="#六、RESTful-API-客户端请求包含哪些内容？" class="headerlink" title="六、RESTful API 客户端请求包含哪些内容？"></a>六、RESTful API 客户端请求包含哪些内容？</h1><h1 id="七、什么是-RESTful-API-身份验证方法？"><a href="#七、什么是-RESTful-API-身份验证方法？" class="headerlink" title="七、什么是 RESTful API 身份验证方法？"></a>七、什么是 RESTful API 身份验证方法？</h1><h1 id="八、RESTful-API-服务器响应包含哪些内容？"><a href="#八、RESTful-API-服务器响应包含哪些内容？" class="headerlink" title="八、RESTful API 服务器响应包含哪些内容？"></a>八、RESTful API 服务器响应包含哪些内容？</h1>]]></content>
    
    
    <categories>
      
      <category>web</category>
      
    </categories>
    
    
    <tags>
      
      <tag>web</tag>
      
      <tag>api</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Manjaro 安装 open-jdk8</title>
    <link href="/2023/06/01/02_%E8%AE%A1%E7%AE%97%E6%9C%BA/05_%E6%90%9E%E6%9C%BA%E6%8A%80%E5%B7%A7/01.manjaro/2.Manjaro%20%E5%AE%89%E8%A3%85%20open-jdk/"/>
    <url>/2023/06/01/02_%E8%AE%A1%E7%AE%97%E6%9C%BA/05_%E6%90%9E%E6%9C%BA%E6%8A%80%E5%B7%A7/01.manjaro/2.Manjaro%20%E5%AE%89%E8%A3%85%20open-jdk/</url>
    
    <content type="html"><![CDATA[<p>命令行中输入：<code>sudo pacman -S jdk8-openjdk</code></p><p><img src="/img/2023/5/30/18uTools_1685439561564.png" alt="下载"></p>]]></content>
    
    
    <categories>
      
      <category>Manjaro</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Manjaro</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Manjaro 报错 找不到 libcrypt.so.1</title>
    <link href="/2023/06/01/02_%E8%AE%A1%E7%AE%97%E6%9C%BA/05_%E6%90%9E%E6%9C%BA%E6%8A%80%E5%B7%A7/01.manjaro/1.Manjaro%20%E6%8A%A5%E9%94%99%20%E6%89%BE%E4%B8%8D%E5%88%B0%20libcrypt.so.1/"/>
    <url>/2023/06/01/02_%E8%AE%A1%E7%AE%97%E6%9C%BA/05_%E6%90%9E%E6%9C%BA%E6%8A%80%E5%B7%A7/01.manjaro/1.Manjaro%20%E6%8A%A5%E9%94%99%20%E6%89%BE%E4%B8%8D%E5%88%B0%20libcrypt.so.1/</url>
    
    <content type="html"><![CDATA[<p>想要在 manjaro 中安装 resilo sync 做数据同步，但在运行程序时，manjaro 提示找不到一个名为 libcrypt.so.1的库。</p><p>libcrypt.so.1 库存在于 libxcrypt-compat，所以下载 libxcrypt-compat即可</p><p><code>sudo pacman -S libxcrypt-compat</code></p><p><img src="/img/2023/5/30/18uTools_1685437551017.png" alt="安装libcrypt.so.1"></p>]]></content>
    
    
    <categories>
      
      <category>Manjaro</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Manjaro</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>docker compose 安装与使用</title>
    <link href="/2023/06/01/01_%E7%BC%96%E7%A8%8B%E7%9B%B8%E5%85%B3/05_%E6%9C%8D%E5%8A%A1%E5%99%A8/1.docker/2.docker%20compose/"/>
    <url>/2023/06/01/01_%E7%BC%96%E7%A8%8B%E7%9B%B8%E5%85%B3/05_%E6%9C%8D%E5%8A%A1%E5%99%A8/1.docker/2.docker%20compose/</url>
    
    <content type="html"><![CDATA[<h1 id="二进制安装"><a href="#二进制安装" class="headerlink" title="二进制安装"></a>二进制安装</h1><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-regexp">//</span>指定版本安装：<br>$ sudo curl -L https:<span class="hljs-regexp">//g</span>et.daocloud.io<span class="hljs-regexp">/docker/</span>compose<span class="hljs-regexp">/releases/</span>download<span class="hljs-regexp">/1.23.1/</span>\<br>docker-compose-`uname -s`-`uname -m` &gt; <span class="hljs-regexp">/usr/</span>local<span class="hljs-regexp">/bin/</span>docker-compose<br><br><span class="hljs-regexp">//</span>对二进制文件赋可执行权限<br>$ sudo chmod +x <span class="hljs-regexp">/usr/</span>local<span class="hljs-regexp">/bin/</span>docker-compose<br></code></pre></td></tr></table></figure><h1 id="yum源安装"><a href="#yum源安装" class="headerlink" title="yum源安装"></a>yum源安装</h1><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmake">$ yum -y <span class="hljs-keyword">install</span> docker-compose<br></code></pre></td></tr></table></figure><h1 id="测试安装是否成功"><a href="#测试安装是否成功" class="headerlink" title="测试安装是否成功"></a>测试安装是否成功</h1><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs applescript">$ docker-compose <span class="hljs-comment">--version</span><br>docker-compose <span class="hljs-built_in">version</span> <span class="hljs-number">1.23</span><span class="hljs-number">.1</span>, build <span class="hljs-number">1719</span>ceb<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>docker compose</category>
      
    </categories>
    
    
    <tags>
      
      <tag>docker</tag>
      
      <tag>docker compose</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>使用 yum 安装 docker</title>
    <link href="/2023/06/01/01_%E7%BC%96%E7%A8%8B%E7%9B%B8%E5%85%B3/05_%E6%9C%8D%E5%8A%A1%E5%99%A8/1.docker/1.docker%E5%AE%89%E8%A3%85/"/>
    <url>/2023/06/01/01_%E7%BC%96%E7%A8%8B%E7%9B%B8%E5%85%B3/05_%E6%9C%8D%E5%8A%A1%E5%99%A8/1.docker/1.docker%E5%AE%89%E8%A3%85/</url>
    
    <content type="html"><![CDATA[<h1 id="一、更新-yum"><a href="#一、更新-yum" class="headerlink" title="一、更新 yum"></a>一、更新 yum</h1><p><code>yum -y update</code></p><figure class="highlight n1ql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs n1ql">注意​ <br>yum -y <span class="hljs-keyword">update</span>：升级所有包同时也升级软件和系统内核；​ <br>yum -y upgrade：只升级所有包，不升级软件和系统内核<br></code></pre></td></tr></table></figure><h1 id="二、设置-yum-源"><a href="#二、设置-yum-源" class="headerlink" title="二、设置 yum 源"></a>二、设置 yum 源</h1><p>下面两个仓库任选一个即可。</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs awk">yum-config-manager --add-repo http:<span class="hljs-regexp">//</span>download.docker.com<span class="hljs-regexp">/linux/</span>centos/docker-ce.repo（中央仓库）<br><br>yum-config-manager --add-repo http:<span class="hljs-regexp">//mi</span>rrors.aliyun.com<span class="hljs-regexp">/docker-ce/</span>linux<span class="hljs-regexp">/centos/</span>docker-ce.repo（阿里仓库）<br></code></pre></td></tr></table></figure><p><img src="/img/2023/6/1/121685595074188.png" alt="添加仓库"></p><h1 id="三、选择-docker-版本并安装"><a href="#三、选择-docker-版本并安装" class="headerlink" title="三、选择 docker 版本并安装"></a>三、选择 docker 版本并安装</h1><h2 id="1-查看版本"><a href="#1-查看版本" class="headerlink" title="1. 查看版本"></a>1. 查看版本</h2><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs vim">yum <span class="hljs-keyword">list</span> docker-<span class="hljs-keyword">ce</span> --showduplicates | <span class="hljs-keyword">sort</span> -r<br></code></pre></td></tr></table></figure><p><img src="/img/2023/6/1/121685595161077.png" alt="版本"></p><h2 id="2-安装"><a href="#2-安装" class="headerlink" title="2. 安装"></a>2. 安装</h2><p>选择一个版本并安装：<code>yum install docker-ce-版本号</code></p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">yum</span> -y install docker-ce-<span class="hljs-number">18</span>.<span class="hljs-number">03</span>.<span class="hljs-number">1</span>.ce<br></code></pre></td></tr></table></figure><h1 id="四、设置-docker-开机自启"><a href="#四、设置-docker-开机自启" class="headerlink" title="四、设置 docker 开机自启"></a>四、设置 docker 开机自启</h1><figure class="highlight nsis"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs nsis"><span class="hljs-params">system</span>ctl start docker<br><span class="hljs-params">system</span>ctl enable docker<br></code></pre></td></tr></table></figure><p><img src="/img/2023/6/1/141685599713562.png" alt="自启动"></p>]]></content>
    
    
    <categories>
      
      <category>docker</category>
      
    </categories>
    
    
    <tags>
      
      <tag>yum</tag>
      
      <tag>docker</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>使用腾讯云服务器 + Lsky Pro 搭建图床</title>
    <link href="/2023/06/01/02_%E8%AE%A1%E7%AE%97%E6%9C%BA/05_%E6%90%9E%E6%9C%BA%E6%8A%80%E5%B7%A7/02.hexo/3.%E6%90%AD%E5%BB%BA%E5%9B%BE%E5%BA%8A/"/>
    <url>/2023/06/01/02_%E8%AE%A1%E7%AE%97%E6%9C%BA/05_%E6%90%9E%E6%9C%BA%E6%8A%80%E5%B7%A7/02.hexo/3.%E6%90%AD%E5%BB%BA%E5%9B%BE%E5%BA%8A/</url>
    
    <content type="html"><![CDATA[<p>人在家中坐，锅从天上来！</p><p>大无语了，家人们，谁懂啊！！</p><p>本来还在家开开心心写博客，结果下午一看图片全失效了！！玛德</p><p>是 gitee 出了轨，还是 github 劈了腿，不管是哪家的服务都没法用作图床，太难了。。。</p><p>上网看了看图床，真贵。。。只能拿出我半年没用过的腾讯云服务器自己来搞一个图床服务了，太无语了。。。</p><span id="more"></span><h1 id="一、选择-Lsky-Pro-蓝空图床"><a href="#一、选择-Lsky-Pro-蓝空图床" class="headerlink" title="一、选择 Lsky Pro 蓝空图床"></a>一、选择 Lsky Pro 蓝空图床</h1><p>我看好多人都在推荐这个蓝空图床，所以就先看了一下这个。</p><p>蓝空是基于 PHP 开发的开源图床，但是也有付费版本，可以直接买断，这是他们的功能对比：</p><p><img src="/img/2023/6/1/001685549777055.png" alt="蓝空"></p><p>这次本来就是想贪个小便宜，就先用一下开源版本的。</p><p><a href="https://github.com/lsky-org/lsky-pro">GitHub 项目地址</a></p><h1 id="二、安装"><a href="#二、安装" class="headerlink" title="二、安装"></a>二、安装</h1><p>先上<a href="https://docs.lsky.pro/">手册</a></p><h2 id="1-配置环境"><a href="#1-配置环境" class="headerlink" title="1. 配置环境"></a>1. 配置环境</h2><p>根据手册说明，安装图床需要一个服务器，nginx 或 apache 都可以，还需要 PHP 8.0.2+，所以我们先来安装这些环境</p><p><img src="/img/2023/6/1/001685550579024.png" alt="要求"></p><h3 id="1-1-安装PHP"><a href="#1-1-安装PHP" class="headerlink" title="1.1 安装PHP"></a>1.1 安装PHP</h3><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><br>./configure \<br><span class="hljs-attr">--prefix</span>=/usr/local/php \                           <span class="hljs-selector-attr">[php安装的根目录]</span><br><span class="hljs-attr">--exec-prefix</span>=/usr/local/php \                      <span class="hljs-selector-attr">[php执行文件所在目录]</span><br><span class="hljs-attr">--bindir</span>=/usr/local/php/bin \                       <span class="hljs-selector-attr">[php/bin目录]</span><br><span class="hljs-attr">--sbindir</span>=/usr/local/php/sbin \                     <span class="hljs-selector-attr">[php/sbin目录]</span><br><span class="hljs-attr">--includedir</span>=/usr/local/php/include \               <span class="hljs-selector-attr">[php包含文件所在目录]</span><br><span class="hljs-attr">--libdir</span>=/usr/local/php/lib/php \                   <span class="hljs-selector-attr">[php/lib目录]</span><br><span class="hljs-attr">--mandir</span>=/usr/local/php/php/man \                   <span class="hljs-selector-attr">[php/man目录]</span><br><span class="hljs-attr">--with-config-file-path</span>=/usr/local/php/etc \        <span class="hljs-selector-attr">[php的配置目录]</span><br><span class="hljs-attr">--with-openssl</span> \                             <span class="hljs-selector-attr">[OpenSSL 是一个安全套接字层密码库]</span><br><span class="hljs-attr">--enable-mbstring</span> \                                 <span class="hljs-selector-attr">[开启多字节字符串函数]</span><br><span class="hljs-attr">--enable-fpm</span>                                        <span class="hljs-selector-attr">[开启fpm]</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>hexo</category>
      
    </categories>
    
    
    <tags>
      
      <tag>图床</tag>
      
      <tag>Lsky Pro</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>String、StringBuilder、StringBuffer三者横评</title>
    <link href="/2023/05/31/01_%E7%BC%96%E7%A8%8B%E7%9B%B8%E5%85%B3/03_java/1.%E5%9F%BA%E7%A1%80/1.Java%E5%AD%97%E7%AC%A6%E4%B8%B2/"/>
    <url>/2023/05/31/01_%E7%BC%96%E7%A8%8B%E7%9B%B8%E5%85%B3/03_java/1.%E5%9F%BA%E7%A1%80/1.Java%E5%AD%97%E7%AC%A6%E4%B8%B2/</url>
    
    <content type="html"><![CDATA[<h1 id="一、创建方式"><a href="#一、创建方式" class="headerlink" title="一、创建方式"></a>一、创建方式</h1><h2 id="1-String-的创建方式"><a href="#1-String-的创建方式" class="headerlink" title="1. String 的创建方式"></a>1. String 的创建方式</h2><p>String 的创建方式有两种：</p><h3 id="1-直接赋值"><a href="#1-直接赋值" class="headerlink" title="1. 直接赋值"></a>1. 直接赋值</h3><p><code>String str = &quot;5say&quot;;</code>  </p><p>当我们使用直接赋值的方式创建字符串的时候，此时创建的字符串会出现在字符常量池中。 </p><p>JDK6 的版本中，字符串常量池在持久代 PermGen 中分配， </p><p>JDK7 的版本中，字符串常量池在堆内存 Heap 中分配。</p><p>那么就有人问了，<strong>为什么要将这些字符串放进字符串常量池中呢？</strong></p><p><img src="/img/2023/5/31/21fff86d2356c5e8e191e38977ba1389b8.jpg" alt="疑问"></p><p>因为在每次创建字符串时，JVM 会在字符串常量池中寻找是否存在这样一个字符串，如果存在的话，那么就不需要重新在搞一个字符串进行赋值了，我直接将现有的拿过去用就行了呗，这样还能减少内存的使用。</p><p>什么？你用一次就不要了？</p><p><img src="/img/2023/5/31/211d4288c06e15d6c3738f4fa14a2c0488.jpg" alt="震惊"></p><p>对于这种情况，常量池表示，问题不大~</p><p>你不用还有别人要用呢，这个时候常量池会查看是否还有变量引用这一个字符串，如果有，那么就什么也不做，服务好当前使用的每一个变量，如果没人用了，那好办，标记一下，等着垃圾车（GC）来收！！</p><p>如果这个字符串被 GC 清理掉了，那么这个字符串就没了，下次如果还要用的话，就需要重新创建了。</p><h3 id="2-使用-new-进行创建"><a href="#2-使用-new-进行创建" class="headerlink" title="2. 使用 new 进行创建"></a>2. 使用 new 进行创建</h3><p>这种情况就类似我们创建一个正常的对象一样，JVM 会在 Heap 堆内存中开辟一片空间，用来存储这个字符串对象，但是同时也会在字符串常量池中放入一个同样的字符串。</p><p><img src="/img/2023/5/31/211685540891930.png" alt="String 构造方法"></p><h2 id="2、StringBuilder-和-StringBuffer的创建方式"><a href="#2、StringBuilder-和-StringBuffer的创建方式" class="headerlink" title="2、StringBuilder 和 StringBuffer的创建方式"></a>2、StringBuilder 和 StringBuffer的创建方式</h2><p>StringBuilder 和 StringBuffer 的创建方式都是通过在堆内存中开辟一片空间，在这块内存当中存储字符串数据</p><h3 id="1-使用-new-创建-StringBuffer"><a href="#1-使用-new-创建-StringBuffer" class="headerlink" title="1. 使用 new 创建 StringBuffer"></a>1. 使用 new 创建 StringBuffer</h3><p><img src="/img/2023/5/31/211685540787289.png" alt="StringBuffer 构造方法"></p><h3 id="2-使用-new-创建-StringBuilder"><a href="#2-使用-new-创建-StringBuilder" class="headerlink" title="2. 使用 new 创建 StringBuilder"></a>2. 使用 new 创建 StringBuilder</h3><p><img src="/img/2023/5/31/211685540750855.png" alt="StringBuilder 构造方法"></p><h1 id="二、线程安全问题"><a href="#二、线程安全问题" class="headerlink" title="二、线程安全问题"></a>二、线程安全问题</h1><p>讲到字符串线程安全问题，大多数人第一反应就是：StringBuffer是线程安全的，StringBuilder是线程不安全的。首先，这个说法是对的，我偷偷问一句，String 线程安全吗？</p><p><img src="/img/2023/5/31/211685541361055.png" alt="goutou"></p><h2 id="1-String-是线程安全的"><a href="#1-String-是线程安全的" class="headerlink" title="1. String 是线程安全的"></a>1. String 是线程安全的</h2><p>我们先看一下 String 的源码：<br><img src="/img/2023/5/31/211685541542185.png" alt="String"></p><p>String 类是被关键字 final 修饰的，所以 String 类的值不可被改变！！</p><p>有人就问了，不对呀，我经常修改 String 的值呀</p><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs abnf">String str <span class="hljs-operator">=</span> <span class="hljs-string">&quot;hello world!&quot;</span><span class="hljs-comment">;</span><br><span class="hljs-attribute">str</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;hello&quot;</span><span class="hljs-comment">;</span><br></code></pre></td></tr></table></figure><p>我这样不就把 String 的值改变了吗</p><p>此时在变量<code>str</code>中引用的值确实是被改变了，但是在字符串常量池中的<code>hello world!</code>却没有被改变，所以我们修改的只是变量<code>str</code>的引用地址，而不是修改的字符串<code>hello world!</code>的值。</p><p>如果还不清楚请再看看上面 String 的创建过程。</p><p>由于 String 不可变，所以在线程中是安全的</p><p><img src="/img/2023/5/31/221685541878326.png" alt="string"></p><h2 id="2-StringBuffer-是线程安全的"><a href="#2-StringBuffer-是线程安全的" class="headerlink" title="2. StringBuffer 是线程安全的"></a>2. StringBuffer 是线程安全的</h2><p>同样的道理，我们来看看 StringBuffer 的源码：<br><img src="/img/2023/5/31/221685542135302.png" alt="StringBuffer"></p><p>唉！我知道了！因为 StringBuffer 被 final 修饰，所以 StringBuffer 线程安全！</p><p>恭喜你！答错了！</p><p>在这里 StringBuffer 的线程安全并不是因为它被 final 修饰，而是因为他的操作方式。</p><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs abnf">StringBuffer sb <span class="hljs-operator">=</span> new StringBuffer(<span class="hljs-number">16</span>)<span class="hljs-comment">;</span><br>sb.append(<span class="hljs-string">&quot;hello &quot;</span>)<span class="hljs-comment">;</span><br>sb.append(<span class="hljs-string">&quot;world!&quot;</span>)<span class="hljs-comment">;</span><br></code></pre></td></tr></table></figure><p>我们看到，在使用 StringBuffer 的过程中我们并没有直接通过赋值来修改 StringBuffer 的引用，而是通过 <code>append()</code> 方法来修改其中的内容，所以 StringBuffer 线程是否安全我们需要看 <code>append()</code> 方法是否安全。</p><p><img src="/img/2023/5/31/221685542736472.png" alt="stringBuffer"></p><p>通过源码我们可以看到，StringBuffer 的方法基本都被 <code>synchronized</code> 修饰，所以 StringBuffer 在线程中是安全的。</p><p><img src="/img/2023/5/31/221685542853444.png" alt="StringBuffer"></p><h2 id="3-StringBuilder-是线程不安全的"><a href="#3-StringBuilder-是线程不安全的" class="headerlink" title="3. StringBuilder 是线程不安全的"></a>3. StringBuilder 是线程不安全的</h2><p>接下来我们再看 StringBuilder：<br><img src="/img/2023/5/31/221685542978923.png" alt="StringBuilder"></p><p>StringBuilder 与 StringBuffer 类似，都被 final 修饰，但它与 StringBuffer<br> 相比，它的方法上面没有关键字  <code>synchronized</code> ，所以在多线程操作上是不安全的。</p><p><img src="/img/2023/5/31/221685543090107.png" alt="StringBuilder"></p><h1 id="三、性能比较"><a href="#三、性能比较" class="headerlink" title="三、性能比较"></a>三、性能比较</h1><h2 id="1-内存占用比较"><a href="#1-内存占用比较" class="headerlink" title="1. 内存占用比较"></a>1. 内存占用比较</h2><p>由于每次修改字符串时，String都会重新创建一个字符串放入字符串常量池，所以当有大量修改字符串内容的场景，String对内存的占用就会比较高。</p><p>所以内存占用上面是：StringBuffer &#x3D; StringBuilder &gt; String</p><h2 id="2-运行速度比较"><a href="#2-运行速度比较" class="headerlink" title="2. 运行速度比较"></a>2. 运行速度比较</h2><h3 id="1-大量字符串拼接、修改场景"><a href="#1-大量字符串拼接、修改场景" class="headerlink" title="1. 大量字符串拼接、修改场景"></a>1. 大量字符串拼接、修改场景</h3><p>由于StringBuffer需要保证线程安全，所以每次只能有一个线程操作字符串，就导致速度大大降低。</p><p>而 String 则因为每次修改都要重新创建对象而完全占据下风。</p><p>所以在大量字符串拼接场景中：StringBuilder &gt; StringBuffer &gt; String</p>]]></content>
    
    
    <categories>
      
      <category>Java SE</category>
      
    </categories>
    
    
    <tags>
      
      <tag>String</tag>
      
      <tag>StringBuilder</tag>
      
      <tag>StringBuffer</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Manjaro 管理 Java 版本</title>
    <link href="/2023/05/31/02_%E8%AE%A1%E7%AE%97%E6%9C%BA/05_%E6%90%9E%E6%9C%BA%E6%8A%80%E5%B7%A7/01.manjaro/5.Manjaro%20%E7%AE%A1%E7%90%86%20Java%20%E7%89%88%E6%9C%AC/"/>
    <url>/2023/05/31/02_%E8%AE%A1%E7%AE%97%E6%9C%BA/05_%E6%90%9E%E6%9C%BA%E6%8A%80%E5%B7%A7/01.manjaro/5.Manjaro%20%E7%AE%A1%E7%90%86%20Java%20%E7%89%88%E6%9C%AC/</url>
    
    <content type="html"><![CDATA[<p>作为一个使用 Manjaro 为主力开发平台的搬砖人，肯定是少不了使用各个不同版本的 Java，如果每次都重新下载，重新配置 PATH ，重新搞一套套，都要累死了。不过好在 Manjaro 提供了快速管理各个版本 Java 的工具 – <code>archlinux-java</code></p><span id="more"></span><h1 id="一、archlinux-java-介绍"><a href="#一、archlinux-java-介绍" class="headerlink" title="一、archlinux-java 介绍"></a>一、archlinux-java 介绍</h1><p>archlinux-java 能够快速帮我们查看当前电脑上安装的所有 JDK 并能够在不同的 JDK 中快速进行切换。</p><p>在命令行中输入 <code>archlinux-java</code> 回车，即可看到它支持的所有参数</p><p><img src="/img/2023/5/31/151685516441398.png" alt="命令"></p><h2 id="1-status"><a href="#1-status" class="headerlink" title="1. status"></a>1. status</h2><p>列出当前计算机上已安装的所有 Java 环境，并以<code>default</code>标记当前使用的环境。 </p><p><img src="/img/2023/5/31/151685516600495.png" alt="status"></p><h2 id="2-get"><a href="#2-get" class="headerlink" title="2. get"></a>2. get</h2><p>返回设置为默认值的Java环境的简称 </p><p><img src="/img/2023/5/31/151685516648210.png" alt="get"></p><h2 id="3-set"><a href="#3-set" class="headerlink" title="3. set"></a>3. set</h2><p>设置某一版本的 JDK 为默认环境</p><p><img src="/img/2023/5/31/151685516743481.png" alt="set"></p><p>注意：此时我们需要 root 权限</p><p><img src="/img/2023/5/31/151685516877019.png" alt="sudo set"></p><h2 id="4-unset"><a href="#4-unset" class="headerlink" title="4. unset"></a>4. unset</h2><p>取消设置当前默认的Java环境</p><h2 id="5-fix"><a href="#5-fix" class="headerlink" title="5. fix"></a>5. fix</h2><p>修复无效&#x2F;损坏的默认Java环境配置</p><h1 id="二、安装-JDK"><a href="#二、安装-JDK" class="headerlink" title="二、安装 JDK"></a>二、安装 JDK</h1><p>能够快速管理我们的 JDK 环境，那么在使用的时候就可以为所欲为了。</p><p>使用<code>sudo pacman -S jdk8-openjdk</code>命令快速安装JDK！</p><p>其中的 8 可以替换为任意版本，一般没啥问题，如果无法下载，那就。。</p><center><p><img src="/img/2023/5/31/1581a78e3332b4f95c19bf369dc7783d86.jpg" alt="百度"></p></center>]]></content>
    
    
    <categories>
      
      <category>Manjaro</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Manjaro</tag>
      
      <tag>Java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>vscode 配置 Java 开发环境</title>
    <link href="/2023/05/31/02_%E8%AE%A1%E7%AE%97%E6%9C%BA/05_%E6%90%9E%E6%9C%BA%E6%8A%80%E5%B7%A7/03.vscode/2.vscode%E9%85%8D%E7%BD%AEjava%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83/"/>
    <url>/2023/05/31/02_%E8%AE%A1%E7%AE%97%E6%9C%BA/05_%E6%90%9E%E6%9C%BA%E6%8A%80%E5%B7%A7/03.vscode/2.vscode%E9%85%8D%E7%BD%AEjava%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83/</url>
    
    <content type="html"><![CDATA[<p>任何一个程序员都有自己喜爱的编辑器、工具、开发利器，有这样一群人，对于 vim 这种上古神器难以驾驭、IDE 又太笨重，这时候多了一个选择 vscode！！！</p><span id="more"></span><p>vscode 重新定义了编辑器，它开源、免费、Runs everywhere，是一款介于 IDE 和编辑器之间的产物，支持多平台运行（Windows，Linux，mac）,对于某些轻度开发场景来说，简直就是程序员的福音!!</p><center> <p><img src="/img/2023/5/31/138ecf536bd2df897e733abb2e4843a19f.jpg" alt="美滋滋"> </p></center><p>vscode 功能虽然十分强大，但是他的功能更多是依赖于它的各种插件，我们可以根据我们的需求，在插件市场定制我们需要的 vscode。</p><p>这个定制的过程不得不说属实是枯燥且无聊。那么接下来我们来配置一下我们在 vscode 中进行Java开发需要的环境。</p><h1 id="一、插件安装"><a href="#一、插件安装" class="headerlink" title="一、插件安装"></a>一、插件安装</h1><h2 id="1-插件单独安装"><a href="#1-插件单独安装" class="headerlink" title="1. 插件单独安装"></a>1. 插件单独安装</h2><ol><li>Language Support for Java(TM) by Red Hat<br><img src="/img/2023/5/31/131685511288201.png" alt="Language Support for Java(TM) by Red Hat"></li></ol><p>这个插件是帮助我们在 vscode 中运行 Java代码的。</p><ol start="2"><li>Debugger for Java<br><img src="/img/2023/5/31/131685511371312.png" alt="Debugger for Java"></li></ol><p>这个插件是帮助我们调试程序的。</p><ol start="3"><li>Maven for Java<br><img src="/img/2023/5/31/131685511347514.png" alt="Maven for Java"></li></ol><p>一个标准化的 Java 工程一定不是几个文件组成，maven 是在Java环境下构建应用程序的软件（本地要先安装哦）。</p><ol start="4"><li>Test Runner for Java<br><img src="/img/2023/5/31/131685511399282.png" alt="Test Runner for Java"></li></ol><p>这个插件是帮助我们运行单元测试的，不测试可以不装。 </p><h2 id="2-直接安装-Java-全家桶"><a href="#2-直接安装-Java-全家桶" class="headerlink" title="2. 直接安装 Java 全家桶"></a>2. 直接安装 Java 全家桶</h2><p>在插件市场中搜索<code>Extension Pack for Java</code></p><p><img src="/img/2023/5/31/131685512127158.png" alt="Extension Pack for Java"></p><p>这个插件可以帮助我们直接安装所有的插件，详细都安装了哪些可以看他的扩展包介绍。</p><h1 id="二、vscode-配置"><a href="#二、vscode-配置" class="headerlink" title="二、vscode 配置"></a>二、vscode 配置</h1><blockquote><p>PS. 要是系统里面只有java1.8版本，每次打开vscode就会弹出一个页面，说让你选择版本，1.8不行，一个方法是降低Language Support for Java版本，看别人说是0.64.1及之前的版本就不会弹出这个问题，以前用这个版本解决过问题，但是忘记是哪个版本了。第二个办法就是在那个页面下载个java11，但是咱不用它。<br><br>————————————————<br><br>版权声明：本文为CSDN博主「爱唱歌的瓜皮」的原创文章，遵循CC 4.0 BY-SA版权协议，转载请附上原文出处链接及本声明。<br><br>原文链接：<a href="https://blog.csdn.net/qq_42520962/article/details/120488403">https://blog.csdn.net/qq_42520962/article/details/120488403</a></p></blockquote><h2 id="1-配置项目-JDK-环境"><a href="#1-配置项目-JDK-环境" class="headerlink" title="1. 配置项目 JDK 环境"></a>1. 配置项目 JDK 环境</h2><p>打开 vscode 的 settings 文件，至于选择哪个级别的 settings 就全看各位大佬的了。</p><p>然后加入下面这段代码</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs swift"><span class="hljs-string">&quot;java.configuration.runtimes&quot;</span>: [<br>    &#123;<br>        <span class="hljs-string">&quot;name&quot;</span>: <span class="hljs-string">&quot;JavaSE-1.8&quot;</span>,<br>        <span class="hljs-string">&quot;path&quot;</span>: <span class="hljs-string">&quot;jdk 环境，如 E:<span class="hljs-subst">\\</span>Java1.8&quot;</span>,<br>        <span class="hljs-string">&quot;default&quot;</span>: <span class="hljs-literal">true</span><br>    &#125;,<br>],<br></code></pre></td></tr></table></figure><h2 id="2-配置-vscode-使用的-JRE-环境"><a href="#2-配置-vscode-使用的-JRE-环境" class="headerlink" title="2. 配置 vscode 使用的 JRE　环境"></a>2. 配置 vscode 使用的 JRE　环境</h2><p>上面一段代码主要控制当前 Java 项目运行时使用的 JRE 环境，但是 vscode 需要一个 Java 11 以上的版本作为 vscode 的运行环境，也就是意味着，在你的计算机上需要存在一个 11 以上的版本提供给 vscode 使用，至于项目使用哪个版本，则需要另外安装。</p><p>如果没有给 vscode 提供 11 以上的运行环境，那么在你打开 vscode 时，会弹出一个窗口，提示你缺少这样一个运行环境。</p><p>当我们安装完 11 以上的 Java 以后，需要告诉 vscode 它需要的 JRE 环境在哪里，这时候我们需要再次打开 settings 文件，添加如下配置：</p><p>Linux用户：</p><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs 1c"><span class="hljs-string">&quot;java.jdt.ls.java.home&quot;</span>:<span class="hljs-string">&quot;JRE 目录&quot;</span><br><br>如：<span class="hljs-string">&quot;java.jdt.1s.java.home&quot;</span>:<span class="hljs-string">&quot;/usr/lib/jvm/java-17-openjdk&quot;</span>,<br></code></pre></td></tr></table></figure><p>Windows用户：</p><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs 1c"><span class="hljs-string">&quot;java.home&quot;</span>:<span class="hljs-string">&quot;JRE 目录&quot;</span><br><br>如：<span class="hljs-string">&quot;java.home&quot;</span>:<span class="hljs-string">&quot;D:\jdk\jdk17&quot;</span>,<br></code></pre></td></tr></table></figure><p><strong>要注意：这里配置的必须是 Java 11及以上版本</strong></p><h2 id="3-完全版配置"><a href="#3-完全版配置" class="headerlink" title="3. 完全版配置"></a>3. 完全版配置</h2><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;java.jdt.1s.java.home&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;/usr/lib/jvm/java-17-openjdk&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;java.configuration.runtimes&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-punctuation">&#123;</span><br>        <span class="hljs-string">&quot;name&quot;</span><span class="hljs-string">&quot;JavaSE-1.8&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;path&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;/usr/lib/jvm/java-8-openjdk&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;default&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-literal"><span class="hljs-keyword">true</span></span><br>    <span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><h1 id="二、工具使用"><a href="#二、工具使用" class="headerlink" title="二、工具使用"></a>二、工具使用</h1><h2 id="1-万事离不开的-hello-world"><a href="#1-万事离不开的-hello-world" class="headerlink" title="1. 万事离不开的 hello world"></a>1. 万事离不开的 hello world</h2><p>到了这一步我们就可以使用 vscode 编写我们的程序了。</p><p><img src="/img/2023/5/31/141685515741775.png" alt="代码"></p><h2 id="2-编译与调试工具"><a href="#2-编译与调试工具" class="headerlink" title="2. 编译与调试工具"></a>2. 编译与调试工具</h2><p><img src="/img/2023/5/31/141685515870565.png" alt="编译"></p><p>在这里我们可以选择编译与调试工具，然后在控制台就可以看到对应的运行结果啦！</p><center><p><img src="/img/2023/5/31/14OIP.jpg" alt="收工"></p></center>]]></content>
    
    
    <categories>
      
      <category>vscode</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
      <tag>vscode</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>vscode配置markdown文档的snippet不生效</title>
    <link href="/2023/05/31/02_%E8%AE%A1%E7%AE%97%E6%9C%BA/05_%E6%90%9E%E6%9C%BA%E6%8A%80%E5%B7%A7/03.vscode/1.vscode%E9%85%8D%E7%BD%AEmarkdown%E6%96%87%E6%A1%A3%E7%9A%84snippet%E4%B8%8D%E7%94%9F%E6%95%88/"/>
    <url>/2023/05/31/02_%E8%AE%A1%E7%AE%97%E6%9C%BA/05_%E6%90%9E%E6%9C%BA%E6%8A%80%E5%B7%A7/03.vscode/1.vscode%E9%85%8D%E7%BD%AEmarkdown%E6%96%87%E6%A1%A3%E7%9A%84snippet%E4%B8%8D%E7%94%9F%E6%95%88/</url>
    
    <content type="html"><![CDATA[<p>近期由于要写一些格式统一的默认文档来更加方便写博客，因此想在 Markdown 文件中也设置一个 snippet，以此来输入一个 blog 就可以将我预先需要的格式直接生成出来。但是在配置好markdown.json 之后，发现在 Markdown 中输入 blog 并没有生效。</p><p>这是因为在 Visual Studio 默认配置中，没有开启 Markdown 文件中的补全与匹配，需要我们手动进行配置。</p><ol><li>打开 settings.json 文件<br>快捷键 Ctrl + Shift + P 后输入 <code>open settings (json)</code></li></ol><p><img src="/img/2023/5/31/011685466400400.png" alt="open settings (json)"></p><p>在这里一共有四个选项：</p><ul><li><p>打开工作区设置 </p><p>  只要是在当前的工作区使用，这个配置都会生效 。</p><p>  适合用于按工作区进行工作内容区分的大佬，这样可以保证每个工作区都有不同的配置，不会乱，工作区删除之后，任务完成，这个配置也就随之删除。</p></li><li><p>打开默认设置  </p><p>  默认设置将会跟随 vscode 的打开而生效，所以这个设置更加适合更加长期的配置。</p></li><li><p>打开文件夹设置 </p><p>  只要是在指定的文件夹中使用，这个配置都会生效 。</p><p>  适合用于按文件夹进行工作内容区分的大佬，与工作区设置类似，可自由选择。</p></li><li><p>打开用户设置 </p><p>  用户设置将在当前用户登陆的 vscode 生效</p></li></ul><p>这里我选择的是打开工作区设置。</p><ol start="2"><li>添加配置</li></ol><p><img src="/img/2023/5/31/111685504446777.png" alt="配置"></p><p>上面 folders 指定了该配置生效的文件夹，下面是关于 Markdown 的配置，将 settings 的内容粘贴进来就可以快乐的使用 markdown 的代码提示了。</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-attr">&quot;settings&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br><span class="hljs-attr">&quot;[markdown]&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br><span class="hljs-attr">&quot;editor.formatOnSave&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">true</span></span><span class="hljs-punctuation">,</span><br><span class="hljs-attr">&quot;editor.renderWhitespace&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;all&quot;</span><span class="hljs-punctuation">,</span><br><span class="hljs-attr">&quot;editor.quickSuggestions&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br><span class="hljs-attr">&quot;other&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">true</span></span><span class="hljs-punctuation">,</span><br><span class="hljs-attr">&quot;comments&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">true</span></span><span class="hljs-punctuation">,</span><br><span class="hljs-attr">&quot;strings&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">true</span></span><br><span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br><span class="hljs-attr">&quot;editor.acceptSuggestionOnEnter&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;on&quot;</span><br><span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><p>添加之后记得保存 settings 文件，重新打开 md 文件。</p>]]></content>
    
    
    <categories>
      
      <category>vscode</category>
      
    </categories>
    
    
    <tags>
      
      <tag>vscode</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>JVM 入门</title>
    <link href="/2023/05/31/01_%E7%BC%96%E7%A8%8B%E7%9B%B8%E5%85%B3/03_java/4.JVM/1.%E5%85%88%E5%85%A5%E9%97%A8/"/>
    <url>/2023/05/31/01_%E7%BC%96%E7%A8%8B%E7%9B%B8%E5%85%B3/03_java/4.JVM/1.%E5%85%88%E5%85%A5%E9%97%A8/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    <categories>
      
      <category>JVM</category>
      
    </categories>
    
    
    <tags>
      
      <tag>JVM</tag>
      
      <tag>入门</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>fluid 配置 utterances 无法显示的问题</title>
    <link href="/2023/05/30/02_%E8%AE%A1%E7%AE%97%E6%9C%BA/06_bug/fludi%E4%B8%ADutterances%E6%97%A0%E6%B3%95%E5%B1%95%E7%A4%BA/"/>
    <url>/2023/05/30/02_%E8%AE%A1%E7%AE%97%E6%9C%BA/06_bug/fludi%E4%B8%ADutterances%E6%97%A0%E6%B3%95%E5%B1%95%E7%A4%BA/</url>
    
    <content type="html"><![CDATA[<p>在配置 utterances 时，出现了一个奇怪的 BUG：配置一切正常，但是 utterances 无法显示。</p><p>去控制台查看有没有错误代码，却发现控制台中一片详和。。。。无奈了</p><p>但，问题已经解决，在这里，我就记录一下过程以及解决方案。</p><span id="more"></span><h1 id="问题的产生"><a href="#问题的产生" class="headerlink" title="问题的产生"></a>问题的产生</h1><p>在使用 hexo 框架 fluid 主题时，我想要在我的博客系统中加入评论系统，根据 fluid 主题对评论的支持，最后我选择了 utterances 作为博客的评论系统。</p><p>然后我根据 <a href="https://utteranc.es/">utterances</a> 官网的配置流程一步一步进行配置，最后发现我的评论区毫无动静。</p><h1 id="问题的发现过程"><a href="#问题的发现过程" class="headerlink" title="问题的发现过程"></a>问题的发现过程</h1><h2 id="第一次尝试：重新配置-utterances-信息"><a href="#第一次尝试：重新配置-utterances-信息" class="headerlink" title="第一次尝试：重新配置 utterances 信息"></a>第一次尝试：重新配置 utterances 信息</h2><p>第一次我自然的以为是我的配置出了问题，所以我就巴拉巴拉之前配置的博客配置文件（曾多次搭建博客，但都没能坚持下来，手动狗头），看了看我的配置，和现在的配置是一模一样。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">post:</span><br>  <span class="hljs-attr">comments:</span> <span class="hljs-comment"># 评论 </span><br>    <span class="hljs-attr">enable:</span> <span class="hljs-literal">true</span><br>    <span class="hljs-attr">type:</span> <span class="hljs-string">utterances</span><br><br><span class="hljs-comment"># utterances</span><br><span class="hljs-attr">utterances:</span><br>  <span class="hljs-attr">repo:</span> <span class="hljs-string">5say/5say.github.io</span><br>  <span class="hljs-attr">issue_term:</span> <span class="hljs-string">pathname</span><br>  <span class="hljs-attr">label:</span> <span class="hljs-string">欢迎各位大佬交流</span>  <span class="hljs-string">^_^</span><br>  <span class="hljs-attr">theme:</span> <span class="hljs-string">github-light</span><br>  <span class="hljs-attr">theme_dark:</span> <span class="hljs-string">github-dark</span><br>  <span class="hljs-attr">crossorigin:</span> <span class="hljs-string">anonymous</span><br><br></code></pre></td></tr></table></figure><p>但我仍然不死心，把配置删除然后重新写。。。。</p><p>结果：问题依然存在</p><h2 id="第二次尝试：怀疑是-utterances-无法正常获得-github-repository"><a href="#第二次尝试：怀疑是-utterances-无法正常获得-github-repository" class="headerlink" title="第二次尝试：怀疑是 utterances 无法正常获得 github repository"></a>第二次尝试：怀疑是 utterances 无法正常获得 github repository</h2><p>既然配置没有问题，我就又去研究 utterances 与 github,因为在 utterances 配置中有一个步骤是需要在 github 中下载，并分配 utterances 的访问权限。</p><p>我怀疑是我给 utterances 分配的库不对，因为在创建库的时候我曾经多次创建同名代码库，并删除。</p><p>我怀疑是在这个过程中，导致 utterances 无法正常获得 github repository。</p><p>所以，将 utterances 从 github 中删除，并重新下载安装，分配权限。</p><p>结果：毫无起色</p><h2 id="第三次尝试：怀疑是-fluid-的问题"><a href="#第三次尝试：怀疑是-fluid-的问题" class="headerlink" title="第三次尝试：怀疑是 fluid 的问题"></a>第三次尝试：怀疑是 fluid 的问题</h2><p>根据之前的尝试，已经初步排除 utterances 与 github的嫌疑，那么接下来的怀疑对象就是我比较放心的 fluid。</p><p>在这一次的博客配置中，因为使用了大量的新功能，所以相比于以前的配置来说，多了很多的配置信息。</p><p>首先研究是否是加入的网站数据统计与 utterances 冲突了，因为两个功能所在的位置比较近，而网站数据统计是第一次使用的新功能，所以就想看看是不是他的问题。</p><p>结果：就是他！</p><p>当我关闭了数据统计功能时，重新启动了一下服务，评论区惊喜的出现在了最后。</p><h1 id="问题的解决"><a href="#问题的解决" class="headerlink" title="问题的解决"></a>问题的解决</h1><p>到此为止，问题已经解决。</p><p>是由于 fluid 使用 PV 与 UV 统计时，框架优化问题，导致PV 与 UV 统计功能与 utterances 评论冲突。</p><p>所以需要先在配置文件中配置 utterances 再配置 PV 与 UV 统计。</p><p>如果顺序错误，则先关闭 PV 与 UV 统计，编译项目，然后再开启 PV 与 UV 统计重新编译即可。</p><p>目前此 BUG 只发现于 fluid + utterances。</p><p>其他的评论暂未发现此 BUG。</p><hr><p>在这里附上一位大佬的 fluid 配置文件：<a href="https://github.com/Cenergy/blog-dev/blob/dev/_config.fluid.yml">Cenergy &#x2F; blog-dev &#x2F; _config.fluid.yml</a></p>]]></content>
    
    
    <categories>
      
      <category>hexo</category>
      
    </categories>
    
    
    <tags>
      
      <tag>fluid</tag>
      
      <tag>utterances</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>记录一下博客迁移完成</title>
    <link href="/2023/05/30/99_%E9%9A%8F%E7%AC%94/2023-05-30%20%E5%8D%9A%E5%AE%A2%E8%BF%81%E7%A7%BB%E5%AE%8C%E6%88%90/"/>
    <url>/2023/05/30/99_%E9%9A%8F%E7%AC%94/2023-05-30%20%E5%8D%9A%E5%AE%A2%E8%BF%81%E7%A7%BB%E5%AE%8C%E6%88%90/</url>
    
    <content type="html"><![CDATA[<p>终于战胜了拖延症，将这个博客给搞出来了，先挑两篇以前写的文章迁移上来，后面再慢慢迁移吧，发个文章纪念一下博客上线</p><p><img src="/imgs/atta/2023-05-30%E5%8D%9A%E5%AE%A2%E8%BF%81%E7%A7%BB%E5%AE%8C%E6%88%90.jpg" alt="加油"></p>]]></content>
    
    
    <categories>
      
      <category>随笔</category>
      
    </categories>
    
    
    <tags>
      
      <tag>随笔</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>浅谈编程语言</title>
    <link href="/2023/05/30/01_%E7%BC%96%E7%A8%8B%E7%9B%B8%E5%85%B3/00.%E6%B5%85%E8%B0%88%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/"/>
    <url>/2023/05/30/01_%E7%BC%96%E7%A8%8B%E7%9B%B8%E5%85%B3/00.%E6%B5%85%E8%B0%88%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/</url>
    
    <content type="html"><![CDATA[<h1 id="一、机器语言"><a href="#一、机器语言" class="headerlink" title="一、机器语言"></a>一、机器语言</h1><p>​机器语言是用二进制代码表示的计算机能直接识别和执行的一种<strong>机器指令的集合</strong>。计算机将之转变为一列高低电平，以使计算机的电子器件受到驱动，进行运算。</p><p>​    <strong>优点</strong>：</p><ol><li>灵活</li><li>直接执行、速度快</li></ol><p>​    <strong>缺点</strong>：</p><ol><li>细节操作大量而繁琐</li><li>程序可靠性差，开发周期长</li><li>开发成本高</li><li>可移植性、重用性、可读性差</li></ol><h1 id="二、汇编语言"><a href="#二、汇编语言" class="headerlink" title="二、汇编语言"></a>二、汇编语言</h1><p>​汇编语言（assembly language）是一种用于<a href="https://baike.baidu.com/item/%E7%94%B5%E5%AD%90%E8%AE%A1%E7%AE%97%E6%9C%BA/191373">电子计算机</a>、<a href="https://baike.baidu.com/item/%E5%BE%AE%E5%A4%84%E7%90%86%E5%99%A8/104320">微处理器</a>、<a href="https://baike.baidu.com/item/%E5%BE%AE%E6%8E%A7%E5%88%B6%E5%99%A8/6688343">微控制器</a>或其他可编程器件的低级语言，亦称为符号语言。汇编语言的另一个特点就是它所操作的对象不是具体的数据,而是寄存器或者存储器。<a href="https://baike.baidu.com/item/%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80/61826?fr=aladdin">摘自 百度词条：汇编语言（面向机器的程序设计语言）</a></p><p>​汇编语言是直接面向处理器（Processor）的程序设计语言。处理器是在指令的控制下工作的，处理器可以识别的每一条指令称为机器指令。每一种处理器都有自己可以识别的一整套指令，称为<a href="https://baike.baidu.com/item/%E6%8C%87%E4%BB%A4%E9%9B%86">指令集</a>。处理器执行指令时，根据不同的指令采取不同的动作，完成不同的功能，既可以改变自己内部的工作状态，也能控制其它外围电路的工作状态。<a href="https://baike.baidu.com/item/%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80/61826?fr=aladdin">摘自 百度词条：汇编语言（面向机器的程序设计语言）</a></p><p>​<strong>优点</strong>：</p><ol><li>可有效访问、控制计算机硬件。</li><li>占用内存少，执行速度快，执行效率高</li></ol><p>​<strong>缺点</strong>：</p><ol><li>通用性和可移植性差</li><li>相对于高级语言来说较为繁琐，易出错</li></ol><h1 id="三、高级语言"><a href="#三、高级语言" class="headerlink" title="三、高级语言"></a>三、高级语言</h1><h2 id="1-前端："><a href="#1-前端：" class="headerlink" title="1. 前端："></a>1. 前端：</h2><h3 id="HTML（超文本标记语言）"><a href="#HTML（超文本标记语言）" class="headerlink" title="HTML（超文本标记语言）"></a>HTML（超文本标记语言）</h3><p>​HTML是一种使用标记标签来描述网页的标记语言。</p><p>​<strong>优点</strong>：</p><ol><li>网络标准统一，呦W3C制定。</li><li>可跨平台，依托于浏览器</li><li>使用记事本便可以进行开发，HTML能直接运行</li></ol><p>​<strong>缺点</strong>：</p><ol><li>因为浏览器编程模型还是单进程单线程，所以无法支持多线程</li><li>安全性没有保障，容易泄露敏感数据。</li><li>浏览器的兼容性问题增加了开发难度</li><li>页面请求过多</li></ol><h3 id="css-层叠样式表"><a href="#css-层叠样式表" class="headerlink" title="css(层叠样式表)"></a>css(层叠样式表)</h3><p>​css解决了HTML开发中内容与表现分离的问题，极大提高工作效率</p><h3 id="javascript"><a href="#javascript" class="headerlink" title="javascript"></a>javascript</h3><p>​javascript是web的编程语言，是一种轻量级的可插入HTML页面的编程代码，可有所有的现代浏览器执行。更可广泛用于服务器、PC、笔记本电脑、平板电脑和智能手机等设备。</p><p>​<strong>优点</strong>：</p><ol><li>减少网络数据传输</li><li>javascript可以方便的操纵HTML对象</li><li>支持分布式运算</li></ol><p>​<strong>缺点</strong>：</p><ol><li>各浏览器对javascript支持程度不同</li><li>“web安全性”对javascript一些功能牺牲</li></ol><p>参考资料：<a href="https://blog.csdn.net/system_err/article/details/76590524">JavaScript特点、优缺点及常用框架</a></p><h2 id="2-后端"><a href="#2-后端" class="headerlink" title="2.后端"></a>2.后端</h2><h3 id="C"><a href="#C" class="headerlink" title="C"></a>C</h3><p>​C 语言是一种通用的高级语言，最初是由丹尼斯·里奇在贝尔实验室为开发 UNIX 操作系统而设计的。UNIX 操作系统，C编译器，和几乎所有的 UNIX 应用程序都是用 C 语言编写的。由于各种原因，C 语言现在已经成为一种广泛使用的专业语言。</p><p>​C语言是一门面向过程的计算机编程语言，与C++、Java等面向对象编程语言有所不同。C语言的设计目标是提供一种能以简易的方式<a href="https://baike.baidu.com/item/%E7%BC%96%E8%AF%91/1258343">编译</a>、处理低级<a href="https://baike.baidu.com/item/%E5%AD%98%E5%82%A8%E5%99%A8/1583185">存储器</a>、仅产生少量的<a href="https://baike.baidu.com/item/%E6%9C%BA%E5%99%A8%E7%A0%81/86125">机器码</a>以及不需要任何运行环境支持便能运行的编程语言。C语言描述问题比汇编语言迅速，工作量小、可读性好，易于<a href="https://baike.baidu.com/item/%E8%B0%83%E8%AF%95">调试</a>、修改和移植，而<a href="https://baike.baidu.com/item/%E4%BB%A3%E7%A0%81%E8%B4%A8%E9%87%8F/8863758">代码质量</a>与<a href="https://baike.baidu.com/item/%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80/61826">汇编语言</a>相当。C语言一般只比<a href="https://baike.baidu.com/item/%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80/61826">汇编语言</a>代码生成的<a href="https://baike.baidu.com/item/%E7%9B%AE%E6%A0%87%E7%A8%8B%E5%BA%8F/8082041">目标程序</a>效率低10%～20%。因此，C语言可以编写系统软件。</p><p>​<a href="https://baike.baidu.com/item/c%E8%AF%AD%E8%A8%80/105958?fromtitle=%EF%BC%A3%E8%AF%AD%E8%A8%80&fromid=6873884#4_2">百度词条</a></p><p>​<strong>特点</strong>：</p><ol><li>易于学习，进行结构化编程</li><li>c语言所产生的代码运行速度与汇编语言编写的代码运行速度几乎一样</li><li>预编译处理使C语言更有弹性</li></ol><p>​<strong>优点</strong>：</p><ol><li>代码量小</li><li>生成目标代码质量高，运行速度快</li><li>功能强大</li><li>跨平台，可移植性强</li><li>使用指针，灵活性强</li><li>允许直接访问物理地址，对硬件进行操作</li></ol><p>​<strong>缺点</strong>：</p><ol><li>数据安全性有很大问题</li><li>语法限制不严格，映像程序安全性</li><li>指针太过灵活，初学难度有点大</li></ol><h3 id="C-1"><a href="#C-1" class="headerlink" title="C++"></a>C++</h3><p>​C++是C语言的继承，它既可以进行C语言的过程化程序设计，又可以进行以抽象数据类型为特点的基于对象的程序设计，还可以进行以继承和多态为特点的面向对象的程序设计。</p><p>​<strong>特点</strong>：</p><ol><li>支持数据封装和数据隐藏</li><li>支持集成和重用</li><li>面向对象</li><li>支持多态性</li><li>C++ 是一种静态类型的、编译式的、通用的、大小写敏感的、不规则的编程语言，支持过程化编程、面向对象编程和泛型编程。</li></ol><p>​<strong>优点</strong>：</p><ol><li>类型检查比c语言更加严格</li><li>增加了面向对象机制</li><li>增加了泛型编程机制</li><li>增加了函数重载和运算符重载</li><li>异常处理</li><li>提供了标准库STL</li></ol><p>​<strong>缺点：</strong></p><ol><li>没有垃圾回收机制，可能引起内存泄漏</li><li>内容较多较难，学习困难</li></ol><h3 id="java"><a href="#java" class="headerlink" title="java"></a>java</h3><p>​<strong>特性</strong>：</p><ol><li>纯面向对象</li><li>支持分布式</li><li>跨平台，移植性强</li><li>是一门编译性语言</li><li>支持多线程，高性能</li></ol><p>​<strong>优点</strong>：</p><ol><li>面向对象</li><li>稳健、安全、可移植、高性能</li><li>跨平台</li><li>编译型静态语言</li></ol><p>​<strong>缺点</strong>：</p><ol><li>编译速度慢</li></ol><h3 id="python"><a href="#python" class="headerlink" title="python"></a>python</h3><p>​<strong>特性</strong>：</p><ol><li>解释性语言</li><li>拥有丰富的库</li><li>跨平台</li><li>可移植、可扩展</li><li>支持GUI编程</li><li>可嵌入</li></ol><p><strong>优点</strong>：</p><ol><li>简单，易学</li><li>免费，开源</li><li>可移植性强</li><li>属于解释性的一门动态语言</li><li>面向对象</li><li>拥有丰富的库</li><li>强制性缩进代码使得代码规范</li></ol><p><strong>缺点</strong>：</p><ol><li>运行速度慢</li><li>国内市场小</li><li>中文资料匮乏</li></ol><h4 id="go"><a href="#go" class="headerlink" title="go"></a>go</h4><p>​go语言被设计成一门应用于搭载web服务器，存储集群或巨型中央服务器的系统编程语言，在高性能分布式系统领域拥有着极其高效的开发效率</p><p>​<strong>特点</strong>：</p><ol><li>简洁，快速，安全</li><li>自动垃圾回收</li><li>函数多返回值</li><li>并发编程</li><li>反射</li><li>语言交互</li><li>跨平台</li><li>开源</li><li>编译型静态语言</li></ol><p>​<strong>优点</strong>：</p><ol><li>性能优越，go比python快30倍，比java快将近一倍</li><li>编译时间非常快</li><li>go编写简单，易于学习</li><li>对 gPRC 和 protocol Buffers 具有一流支持</li><li>GOFMT，强制代码格式</li><li>天生支持并发编程</li><li>强大的标准库</li><li>接近c的运行效率，接近php的开发效率</li></ol><p><strong>缺点</strong>：</p><ol><li>没有主要框架</li><li>错误处理机制太原始</li><li>垃圾回收器不完善</li><li>语法格式要求太过严格，禁止有未使用的变量和多余的import</li><li>对象没有构造函数和析构函数</li><li>技术比较年轻，有待后续发展</li></ol><p>参考资料：<a href="https://www.cnblogs.com/timxgb/p/8728912.html">Go语言的9大优势和3大缺点,　GO语言最初的定位就是互联网时代的C语言,　我为什么放弃Go语言</a></p><h4 id="php超文本预处理器"><a href="#php超文本预处理器" class="headerlink" title="php超文本预处理器"></a>php超文本预处理器</h4><p>​php是一种通用开源脚本语言，语法吸收了c语言、java和perl的特点，利于学习。</p><p>​<strong>特性</strong>：</p><ol><li>独特的语法：混合了c、java\perl以及php自创的新的语法</li><li>与其他编程语言相比，更快速的执行动态网页</li><li>php支持几乎所有流行的数据库以及操作系统</li><li>可以用c、c++进行程序扩展</li></ol><p><strong>优点</strong>：</p><ol><li>php是一个免费开源语言</li><li>开发快，运行快，语法简单，方便学习</li><li>跨平台，效率高</li><li>具有很多成熟框架</li><li>有成熟社区支持php的开发</li></ol><p><strong>缺点</strong>：</p><ol><li>php是个单进程的程序，不支持多线程</li><li>只支持做web开发，不方便做.exe问件、桌面应用程序、手机程序</li><li>不适合做爬虫、自动运行脚本</li><li>后期维护比较困难，后期提速空间局限性大</li></ol><p><a href="https://www.cnblogs.com/ghjbk/p/6829307.html">推荐文章： 浅谈php的优缺点</a></p><h4 id="Ruby"><a href="#Ruby" class="headerlink" title="Ruby"></a>Ruby</h4><p>​Ruby是一种纯粹的面向对象编程语言。</p><p>​<strong>特点：</strong></p><ol><li>完全面向对象，连基本数据类型也是对象</li><li>Ruby的变量可以保存任何类型的数据</li><li>任何东西都有值</li><li>可以做到不需要注释就可以读懂</li></ol><p><strong>优点：</strong></p><ol><li>语法简单</li><li>操作符重载</li><li>有着很高的开发效率</li><li>代码量很少</li><li>方便测试</li><li>拥有原生的数据结构，学习成本较低</li></ol><p><strong>缺点：</strong></p><ol><li>运行效率太低</li><li>BUG难于发现，许多错误都是运行时才会发现</li></ol><h3 id="JSP"><a href="#JSP" class="headerlink" title="JSP"></a>JSP</h3><p>​JSP全称Java Server Pages，是一种动态网页开发技术。它使用JSP标签在HTML网页中插入Java代码。</p><p>​<strong>特点：</strong></p><ol><li>JSP可以直接在HTML网页中动态嵌入元素</li><li>JSP 基于Java Servlet API，因此，JSP拥有各种强大的企业级Java API，包括JDBC，JNDI，EJB，JAXP等等。</li><li>JSP页面可以与处理业务逻辑的 Servlet 一起使用，这种模式被Java servlet 模板引擎所支持。</li></ol><p><strong>优点：</strong></p><ol><li>一次编写，到处运行。除了系统之外，代码不用做任何更改。</li><li>跨平台，支持多种网页格式，jsp标签可扩展性</li><li>强大的可伸缩性。从只有一个小的Jar文件就可以运行Servlet&#x2F;JSP，到由多台服务器进行集群和负载均衡，到多台Application进行事务处理，消息处理，一台服务器到无数台服务器，Java显示了一个巨大的生命力。</li><li>具有非常多的免费优秀的开发工具，并且可以顺利的运行于多平台</li><li>支持服务器端组件</li></ol><p><strong>缺点：</strong></p><ol><li>增加产品的复杂性</li><li>java的高效率运行需要占用大量的内存和硬盘空间</li><li>调试困难</li></ol>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>怎样获得一个好玩的个人博客</title>
    <link href="/2023/05/30/02_%E8%AE%A1%E7%AE%97%E6%9C%BA/05_%E6%90%9E%E6%9C%BA%E6%8A%80%E5%B7%A7/02.hexo/1.%E6%80%8E%E6%A0%B7%E8%8E%B7%E5%BE%97%E4%B8%80%E4%B8%AA%E5%A5%BD%E7%8E%A9%E7%9A%84%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/"/>
    <url>/2023/05/30/02_%E8%AE%A1%E7%AE%97%E6%9C%BA/05_%E6%90%9E%E6%9C%BA%E6%8A%80%E5%B7%A7/02.hexo/1.%E6%80%8E%E6%A0%B7%E8%8E%B7%E5%BE%97%E4%B8%80%E4%B8%AA%E5%A5%BD%E7%8E%A9%E7%9A%84%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/</url>
    
    <content type="html"><![CDATA[<p>如何在win10上利用hexo和github部署一个属于自己的博客呢？这件事情其实不难，大概分为三个部分：</p><ul><li>配置环境</li><li>搭建博客</li><li>同步到github</li></ul><span id="more"></span><h1 id="一、配置环境"><a href="#一、配置环境" class="headerlink" title="一、配置环境"></a>一、配置环境</h1><p>首先介绍我们要使用的两个工具：<a href="https://hexo.io/zh-cn/index.html">hexo</a> 和 <a href="https://github.com/">github</a></p><h2 id="1-hexo：一个免费的快速、简洁且高效的博客框架"><a href="#1-hexo：一个免费的快速、简洁且高效的博客框架" class="headerlink" title="1. hexo：一个免费的快速、简洁且高效的博客框架"></a>1. hexo：一个免费的快速、简洁且高效的博客框架</h2><p>由于hexo使用的技术依赖于 <a href="https://nodejs.org/en">Node.js</a>，所以我们在使用hexo之前需要先在操作系统上安装Node.js。</p><p>根据 hexo 官网提示，hexo 建议用户一直使用最新版本的 hexo 和 Node.js。所以我们可以放心大胆安装最新版本的Node.js</p><h2 id="2-github：代码托管平台"><a href="#2-github：代码托管平台" class="headerlink" title="2. github：代码托管平台"></a>2. github：代码托管平台</h2><p>github 是全球最大的代码托管平台，但由于服务器在国外以及某些网络因素，导致我们在浏览器上访问时会出现偶尔访问不到的情况，这属于正常现象，具体解决方案可以参考<a href="https://zhuanlan.zhihu.com/p/358183268">访问github的小技巧</a>来对自己的电脑进行简单的一些配置，从而可以顺利访问。</p><p>我们使用github管理自己的代码时需要将本地的代码同步到github的服务器上，所以在这里我们需要使用一个工具：<a href="https://git-scm.com/book/zh/v2/%E8%B5%B7%E6%AD%A5-%E5%AE%89%E8%A3%85-Git">git</a>。</p><h3 id="git"><a href="#git" class="headerlink" title="git"></a>git</h3><p>Git 是一个开源的分布式版本控制系统，用于敏捷高效地处理任何或小或大的项目。</p><p>Git 是 Linus Torvalds 为了帮助管理 Linux 内核开发而开发的一个开放源码的版本控制软件。</p><p>Git 与常用的版本控制工具 CVS, Subversion 等不同，它采用了分布式版本库的方式，不必服务器端软件支持。</p><p>至于git的使用教程可以参考：<a href="https://www.runoob.com/git/git-tutorial.html">菜鸟教程 - git</a></p><p>以上工具安装包均可在官网免费下载。</p><p>测试是否安装完成，在命令行分别输入<code>node -v</code>和<code>git --version</code>能够显示 node.js 和 git 的版本号，即为安装成功。（此处一路next即可） </p><h1 id="二、搭建博客"><a href="#二、搭建博客" class="headerlink" title="二、搭建博客"></a>二、搭建博客</h1><ol><li>在自己的文件夹中创建一个放置自己博客的文件夹，然后在创建的文件夹中右击鼠标，从中找到<code>Git Bash Here</code>选项，打开 git 窗口。</li><li>在 git 窗口中输入<code>npm install hexo -g</code>开始安装hexo。</li><li>安装完成后输入<code>hexo -v</code>查看hexo版本号，确认是否安装完成。</li><li>输入<code>hexo init</code>初始化存放博客的文件夹。</li><li>文件夹初始化完成后，输入<code>npm install</code>安装所需要的组件.</li><li>在git窗口中输入<code>hexo g</code>将文件夹中文件进行编译。</li><li>输入<code>hexo s</code>打开本地服务器，此时便可以通过访问本地服务器来访问我们的博客啦！（打开本地服务器后，打开浏览器，输入<code>http:localhost:4000</code>即可访问博客）</li></ol><h1 id="三、将博客同步到github上"><a href="#三、将博客同步到github上" class="headerlink" title="三、将博客同步到github上"></a>三、将博客同步到github上</h1><ol><li><p>打开Git Bash Here</p></li><li><p>配置name 和 email<br>输入<code>git config --global user.name&quot;yourname&quot;</code>设置Git的用户名<br>输入<code>git config --global user.email&quot;youremail&quot;</code>设置Git的邮箱</p></li><li><p>生成密钥</p><ul><li>在Git Bash Here中输入<code>cd ~/.ssh</code>检查是否有.ssh的文件夹<ul><li>如果有.ssh文件夹,输入<code>ls</code>查看文件夹下的内容</li><li>如果没有.ssh文件夹，输入<code>ssh-keygen -t rsa -C &quot;yourEmail&quot;</code>连续输入三个回车，生成密钥（密钥的存放路径是：C:\Users\Administrator.ssh）</li></ul></li><li>输入<code>eval &quot;$(ssh-agent -s)&quot;</code>，添加密钥到ssh-agent</li><li>再输入<code>ssh-add ~/.ssh/id_rsa</code>，添加生成的SSH key到ssh-agent</li></ul></li><li><p>注册<a href="https://github.com/">github</a>账户</p></li><li><p>在github上创建一个以<code>yourname.github.io</code>命名的仓库，创建时使用默认选项即可</p></li><li><p>添加密钥</p><ul><li><p>登陆github，点击右上角头向下的setting —&gt; SSH and GPG keys  —&gt; SSH keys</p></li><li><p>新建一个SSH key 将 C:\Users\Administrator.ssh 下的 id_rsa.pub文件里的内容复制上去.</p></li><li><p>输入<code>ssh -T <a href="mailto:&#x67;&#105;&#x74;&#x40;&#103;&#105;&#116;&#x68;&#x75;&#x62;&#46;&#99;&#111;&#x6d;">&#x67;&#105;&#x74;&#x40;&#103;&#105;&#116;&#x68;&#x75;&#x62;&#46;&#99;&#111;&#x6d;</a></code>，测试添加ssh是否成功。如果看到Hi后面是你的用户名，就说明成功了</p></li><li><p>配置Deployment<br>在你搭建博客的文件夹中找到<code>_config.yml</code>文件，修改<code>repo</code>值（在末尾）</p><pre><code class="hljs">  deploy:     type: git    repository: git@github.com:yourname/yourname.github.io.git    branch: master</code></pre>  <p><strong>注意：每一个<code>:</code>后面都有一个空格</strong></p></li></ul></li><li><p>将本地的博客上传到github上</p><ul><li>在部署博客的文件夹下打开<code>Git Bash Here</code> 输入<code>hexo g</code>编译文件</li><li>输入<code>hexo s</code>打开本地服务器，在本地预览效果 </li><li>输入<code>hexod</code>将博客上传到github上（可能需要等几分钟才能够在网页上看到更新后的效果）</li></ul></li></ol>]]></content>
    
    
    <categories>
      
      <category>hexo</category>
      
    </categories>
    
    
    <tags>
      
      <tag>github</tag>
      
      <tag>hexo</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>markdown基础语法</title>
    <link href="/2023/05/30/01_%E7%BC%96%E7%A8%8B%E7%9B%B8%E5%85%B3/04_markdown/1.markdown%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95/"/>
    <url>/2023/05/30/01_%E7%BC%96%E7%A8%8B%E7%9B%B8%E5%85%B3/04_markdown/1.markdown%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95/</url>
    
    <content type="html"><![CDATA[<p>我曾经尝试过使用记事本来写笔记，也尝试过使用许多的编辑软件来写，像印象笔记，什么什么云笔记啊的，但是发现效果垃圾的一批，格式还要自己后来一点一点调整，最后还是决定使用markdown来写我的笔记，一趟下来高端大气上档次，逼格满满。但我在网上查找好用的markdwon编辑软件的时候，发现有人说这个玩意是程序员专用。。。。。。突然就感觉自己更爱上它了，啊哈哈哈哈哈（笑抽了。。。。）</p><p>好了好了，总结一下主要的用法，给自己以后找个可以看的笔记，偶也。。</p><hr><p><strong>最最关键的：标签后面一定要加空格，在CSDN中如果效果没出来，可能是因为没有顶着开头写</strong></p><h1 id="一、快捷键"><a href="#一、快捷键" class="headerlink" title="一、快捷键"></a>一、快捷键</h1><p>撤销： <kbd>Ctrl</kbd> +  <kbd>Z</kbd> </p><p>重做： <kbd>Ctrl</kbd> +  <kbd>Y</kbd> </p><p>加粗： <kbd>Ctrl</kbd> +  <kbd>B</kbd> </p><p>斜体： <kbd>Ctrl</kbd> +  <kbd>I</kbd> </p><p>标题： <kbd>Ctrl</kbd> +  <kbd>Shift </kbd> +  <kbd>H</kbd> </p><p>无序列表： <kbd>Ctrl </kbd> +  <kbd>Shift</kbd> + <kbd>U</kbd> </p><p>有序列表： <kbd>Ctrl </kbd> +  <kbd>Shift</kbd> + <kbd>O</kbd> </p><p>检查列表： <kbd>Ctrl </kbd> +  <kbd>Shift</kbd> + <kbd>C</kbd> </p><p>插入代码： <kbd>Ctrl </kbd> +  <kbd>Shift</kbd> + <kbd>K</kbd> </p><p>插入链接： <kbd>Ctrl </kbd> +  <kbd>Shift</kbd> + <kbd>L</kbd> </p><p>插入图片： <kbd>Ctrl </kbd> +  <kbd>Shift</kbd> + <kbd>G</kbd></p><h1 id="二、生成标题"><a href="#二、生成标题" class="headerlink" title="二、生成标题"></a>二、生成标题</h1><figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs clean">一级标题 #<br>二级标题 ##<br>三级标题###<br>四级标题#### <br>五级标题#####<br>六级标题######<br></code></pre></td></tr></table></figure><p><strong>效果展示</strong>：</p><h1 id="一级标题"><a href="#一级标题" class="headerlink" title="一级标题"></a>一级标题</h1><h2 id="二级标题"><a href="#二级标题" class="headerlink" title="二级标题"></a>二级标题</h2><h3 id="三级标题"><a href="#三级标题" class="headerlink" title="三级标题"></a>三级标题</h3><h4 id="四级标题"><a href="#四级标题" class="headerlink" title="四级标题"></a>四级标题</h4><h5 id="五级标题"><a href="#五级标题" class="headerlink" title="五级标题"></a>五级标题</h5><h6 id="六级标题"><a href="#六级标题" class="headerlink" title="六级标题"></a>六级标题</h6><p>####### 没有七级标题。。。。。。哈哈哈</p><h1 id="三、改变字体样式"><a href="#三、改变字体样式" class="headerlink" title="三、改变字体样式"></a>三、改变字体样式</h1><figure class="highlight maxima"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs maxima">*强调文本* <span class="hljs-symbol">_</span>强调文本<span class="hljs-symbol">_</span>斜体：前后加上一个 * 或 <span class="hljs-symbol">_</span><br><br>**加粗文本** <span class="hljs-symbol">__</span>加粗文本<span class="hljs-symbol">__</span>加粗：前后加上两个 * 或 <span class="hljs-symbol">_</span><br><br>==标记文本==高光：前后加上两个 ==<br><br>~~删除文本~~删除线：前后加上两个 ~<br><br>&gt; 引用文本<br><br>H&lt;sub&gt;<span class="hljs-number">2</span>&lt;/sub&gt;O <span class="hljs-built_in">is</span>是液体。下标：前后加上一个 &lt;sub&gt;<br><br><span class="hljs-number">2</span>&lt;sup&gt;<span class="hljs-number">10</span>&lt;/sup&gt; 运算结果是 <span class="hljs-number">1024</span>.上标：前后加上一个 &lt;sup&gt;<br></code></pre></td></tr></table></figure><p><strong>效果展示：</strong></p><p>斜体：<em>强调文本</em> <em>强调文本</em></p><p>加粗：<strong>加粗文本</strong> <strong>加粗文本</strong></p><p>高光：&#x3D;&#x3D;标记文本&#x3D;&#x3D;</p><p>删除线：<del>删除文本</del></p><blockquote><p>引用文本</p></blockquote><p>H<sub>2</sub>O is是液体。 </p><p>2<sup>10</sup> 运算结果是 1024.</p><h1 id="四、链接"><a href="#四、链接" class="headerlink" title="四、链接"></a>四、链接</h1><ol><li><p>图片链接 </p><p> <strong>基本语法：</strong> </p><p> <code>![图片名称](图片链接)</code> </p><p>  <strong>示例如下：</strong><br>  <img src="/img/default.png" alt="小姐姐"></p></li><li><p>文字链接<br><strong>基本语法：</strong><br> <code>[链接提示文本](URL)</code></p><p> <strong>示例如下：</strong><br> <a href="http://www.baidu.com/">百度</a></p></li></ol><h1 id="五、代码片"><a href="#五、代码片" class="headerlink" title="五、代码片"></a>五、代码片</h1><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs arcade"><span class="hljs-string">`单行代码`</span><br></code></pre></td></tr></table></figure><p>多行代码使用三个点</p><h1 id="六、列表"><a href="#六、列表" class="headerlink" title="六、列表"></a>六、列表</h1><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs markdown">1、无序列表<br><br><span class="hljs-bullet">-</span> 项目<br><span class="hljs-bullet">   -</span> 项目<br><span class="hljs-bullet">   -</span> 项目<br><br>2、 有序列表<br><br><span class="hljs-bullet">1.</span> 项目1<br><span class="hljs-bullet">2.</span> 项目2<br><span class="hljs-bullet">3.</span> 项目3<br><br>3、复选框<br><br><span class="hljs-bullet">-</span> [ ] 计划任务<br><span class="hljs-bullet">-</span> [x] 完成任务<br><br></code></pre></td></tr></table></figure><p><strong>效果如下：</strong><br>1、无序列表</p><ul><li>项目<ul><li>项目<br> - 项目</li></ul></li></ul><p>2、 有序列表</p><ol><li>项目1</li><li>项目2</li><li>项目3</li></ol><p>3、复选框</p><ul><li><input disabled="" type="checkbox"> 计划任务</li><li><input checked="" disabled="" type="checkbox"> 完成任务</li></ul><h1 id="七、表格"><a href="#七、表格" class="headerlink" title="七、表格"></a>七、表格</h1><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs elixir">使用`<span class="hljs-symbol">:---------</span><span class="hljs-symbol">:`</span>居中<br>使用`<span class="hljs-symbol">:----------`</span>居左<br>使用`----------<span class="hljs-symbol">:`</span>居右<br>| 第一列       | 第二列         | 第三列        |<br>|<span class="hljs-symbol">:-----------</span><span class="hljs-symbol">:|</span> -------------<span class="hljs-symbol">:|</span><span class="hljs-symbol">:-------------|</span><br>| 第一列文本居中 | 第二列文本居右  | 第三列文本居左 | <br></code></pre></td></tr></table></figure><p><strong>效果如下：</strong></p><table><thead><tr><th align="center">第一列</th><th align="right">第二列</th><th align="left">第三列</th></tr></thead><tbody><tr><td align="center">第一列文本居中</td><td align="right">第二列文本居右</td><td align="left">第三列文本居左</td></tr></tbody></table><h1 id="八、空白字符"><a href="#八、空白字符" class="headerlink" title="八、空白字符"></a>八、空白字符</h1><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs xml">换行      <span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br>空格      <span class="hljs-symbol">&amp;emsp;</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>markdown</category>
      
    </categories>
    
    
    <tags>
      
      <tag>markdown</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>面试宝典收藏</title>
    <link href="/2023/05/29/02_%E8%AE%A1%E7%AE%97%E6%9C%BA/04_%E9%9D%A2%E8%AF%95/01_%E9%9D%A2%E8%AF%95%E5%86%85%E5%AE%B9/"/>
    <url>/2023/05/29/02_%E8%AE%A1%E7%AE%97%E6%9C%BA/04_%E9%9D%A2%E8%AF%95/01_%E9%9D%A2%E8%AF%95%E5%86%85%E5%AE%B9/</url>
    
    <content type="html"><![CDATA[<p>工欲善其事，必先利其器。</p><p>为了能够找到一个适合的工作，我们需要看一看大厂在面试的时候主要考察的技术方向，做到心里有数。</p><p>在这里，我整理了一些面试常用的面试题，适合有事没事都来刷一刷。</p><span id="more"></span><h1 id="一、Java-面试宝典"><a href="#一、Java-面试宝典" class="headerlink" title="一、Java 面试宝典"></a>一、Java 面试宝典</h1><ol><li><a href="https://www.nowcoder.com/issue/tutorial?tutorialId=94&uuid=ea1986fcff294f6292385703e94689e8">牛客网 Java工程师面试宝典</a></li></ol><h1 id="二、c-面试题"><a href="#二、c-面试题" class="headerlink" title="二、c++ 面试题"></a>二、c++ 面试题</h1><ol><li><a href="https://www.nowcoder.com/issue/tutorial?tutorialId=93&uuid=8ba2828006dd42879f3a9029eabde9f1">牛客网 c++工程师面试宝典</a></li></ol><h1 id="三、python面试题"><a href="#三、python面试题" class="headerlink" title="三、python面试题"></a>三、python面试题</h1><ol><li><a href="">牛客网 python工程师面试宝典</a></li></ol><h1 id="四、前端面试题"><a href="#四、前端面试题" class="headerlink" title="四、前端面试题"></a>四、前端面试题</h1><ol><li><a href="https://www.nowcoder.com/issue/tutorial?tutorialId=96&uuid=f5212664ab664984882b00635066ded2">牛客网 前端工程师面试宝典</a></li></ol><h1 id="五、测试面试题"><a href="#五、测试面试题" class="headerlink" title="五、测试面试题"></a>五、测试面试题</h1><ol><li><a href="https://www.nowcoder.com/issue/tutorial?tutorialId=97&uuid=761542e6787144eb918eb8a77b961d86">牛客网 测试工程师面试宝典</a></li></ol>]]></content>
    
    
    <categories>
      
      <category>面试</category>
      
    </categories>
    
    
    <tags>
      
      <tag>面试</tag>
      
      <tag>面试手册</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>C++基本语法</title>
    <link href="/2023/03/13/01_%E7%BC%96%E7%A8%8B%E7%9B%B8%E5%85%B3/01_c++/1.3%20c++%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95/"/>
    <url>/2023/03/13/01_%E7%BC%96%E7%A8%8B%E7%9B%B8%E5%85%B3/01_c++/1.3%20c++%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95/</url>
    
    <content type="html"><![CDATA[<p><strong>首先明确一下我使用的电脑环境以及使用的软件：</strong></p><ul><li>Windows 10</li><li>Visual Studio 2022 community</li></ul><p>毕竟只有一个统一的环境才能够出来统一的结果，请避免由于环境因素导致的BUG，否则真的很恶心</p><h1 id="第一个C-程序"><a href="#第一个C-程序" class="headerlink" title="第一个C++程序"></a>第一个C++程序</h1><p>众所周知，程序员的第一个代码都是从hello world开始的，所以我们的第一个C++程序就尊重一下传统吧。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span><br><span class="hljs-function"></span>&#123;<br>cout &lt;&lt; <span class="hljs-string">&quot;hello world&quot;</span>;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>重点解析：</strong></p><ol><li>“#include”的作用是什么？</li></ol><p>#include叫做文件包含命令，用来引入对应的头文件</p><ol start="2"><li>namespace是干嘛的？</li><li>为什么叫做main()?</li><li>return可以省略吗？</li></ol>]]></content>
    
    
    <categories>
      
      <category>C++</category>
      
    </categories>
    
    
    <tags>
      
      <tag>C++</tag>
      
      <tag>基础</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>C++环境设置与开发工具整理</title>
    <link href="/2023/03/13/01_%E7%BC%96%E7%A8%8B%E7%9B%B8%E5%85%B3/01_c++/1.2%20c++%E7%8E%AF%E5%A2%83%E8%AE%BE%E7%BD%AE%E4%B8%8E%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7%E9%80%89%E6%8B%A9/"/>
    <url>/2023/03/13/01_%E7%BC%96%E7%A8%8B%E7%9B%B8%E5%85%B3/01_c++/1.2%20c++%E7%8E%AF%E5%A2%83%E8%AE%BE%E7%BD%AE%E4%B8%8E%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7%E9%80%89%E6%8B%A9/</url>
    
    <content type="html"><![CDATA[<p>tips: 由于软件安装过程网络上一搜一大堆，在这里就不过多赘述，只提供安装包和一份参考文案，如有更多需要，请评论留言或自行百度。</p><span id="more"></span><h1 id="Windows-用户"><a href="#Windows-用户" class="headerlink" title="Windows 用户"></a>Windows 用户</h1><h2 id="1-使用-DEV-CPP-进行开发"><a href="#1-使用-DEV-CPP-进行开发" class="headerlink" title="1.使用 DEV-CPP 进行开发"></a>1.使用 DEV-CPP 进行开发</h2><p><strong>优点：</strong></p><ul><li>无需手动配置运行环境，直接下载安装即可运行C++代码</li><li>足够轻量级，操作界面干净<br><strong>缺点：</strong></li><li>功能太过简单，简单写写demo还行，复杂的项目搞起来比较耗费心力</li></ul><ol><li>DEV-CPP 蓝奏云下载<sup id="fnref:1" class="footnote-ref"><a href="#fn:1" rel="footnote"><span class="hint--top hint--rounded" aria-label="[DEV-CPP 蓝奏云下载](https://wwgb.lanzout.com/iUUBn0pz26xc)">[1]</span></a></sup></li><li>如何安装DEV-CPP<sup id="fnref:4" class="footnote-ref"><a href="#fn:4" rel="footnote"><span class="hint--top hint--rounded" aria-label="[如何在Windows上安装 Dev-Cpp](https://blog.csdn.net/qq_41594445/article/details/102941354)">[4]</span></a></sup></li></ol><h2 id="2-使用-Code-Blocks-进行开发"><a href="#2-使用-Code-Blocks-进行开发" class="headerlink" title="2.使用 Code::Blocks 进行开发"></a>2.使用 Code::Blocks 进行开发</h2><p><strong>优点：</strong></p><ul><li>足够轻量级，操作界面干净</li><li>相对于Dev-cpp来说功能更加完善，对程序员更加友好<br><strong>缺点：</strong></li><li>需要自己配置cpp运行环境</li></ul><ol><li><p>安装MinGW-w64</p><blockquote><p>The heart of the Mingw-w64 project is headers and support libraries to run the output of GCC on Windows. Since Mingw-w64 is neither the home of GCC nor of binutils –<a href="https://www.mingw-w64.org/downloads/">MinGV-w64</a></p></blockquote><p><strong>MinGW-w64:是一个免费的开源 C 库，适用于 Windows 32 位和 64 位平台。</strong></p><ol><li>MinGW-w64 官网下载<sup id="fnref:7" class="footnote-ref"><a href="#fn:7" rel="footnote"><span class="hint--top hint--rounded" aria-label="[MinGW-w64 官网下载](https://winlibs.com/)">[7]</span></a></sup></li><li>MinGW-w64 蓝奏云下载<sup id="fnref:8" class="footnote-ref"><a href="#fn:8" rel="footnote"><span class="hint--top hint--rounded" aria-label="[MinGW-w64 32位 蓝奏云下载](https://wwgb.lanzout.com/i8rnr0pz88sf)">[8]</span></a></sup>，由于蓝奏云限制，暂时只提供32位安装包（64位上传要钱，哈哈）</li><li>MinGW-w64 安装方法</li></ol></li><li><p>安装 Code::Blocks</p><ol><li>Code::Blocks蓝奏云安装包<sup id="fnref:2" class="footnote-ref"><a href="#fn:2" rel="footnote"><span class="hint--top hint--rounded" aria-label="[Code::Blocks 蓝奏云安装包](https://wwgb.lanzout.com/i3p4L0pz260j)">[2]</span></a></sup></li><li>Code::Blocks官网下载<sup id="fnref:3" class="footnote-ref"><a href="#fn:3" rel="footnote"><span class="hint--top hint--rounded" aria-label="[Code::Blocks 官网下载](https://www.codeblocks.org/downloads/binaries/)">[3]</span></a></sup></li><li>Code::Blocks 安装说明<sup id="fnref:5" class="footnote-ref"><a href="#fn:5" rel="footnote"><span class="hint--top hint--rounded" aria-label="[如何在Windows上安装 Code::Blocks](https://www.jianshu.com/p/685f5f1e247f)">[5]</span></a></sup></li></ol></li></ol><h2 id="3-使用VScode进行开发"><a href="#3-使用VScode进行开发" class="headerlink" title="3.使用VScode进行开发"></a>3.使用VScode进行开发</h2><p><strong>优点：</strong></p><ul><li>插件丰富，自己可以根据需求来增加插件</li><li>开发效率高</li><li>足够轻量级，操作界面干净<br><strong>缺点：</strong></li><li>需要自己配置cpp运行环境</li></ul><ol><li>安装MinGW-w64（参考2.1 安装MinGW-w64）</li><li>安装VScode<ol><li>官网下载<sup id="fnref:10" class="footnote-ref"><a href="#fn:10" rel="footnote"><span class="hint--top hint--rounded" aria-label="[官网下载 VScode](https://code.visualstudio.com/Download)">[10]</span></a></sup></li><li>蓝奏云下载<sup id="fnref:11" class="footnote-ref"><a href="#fn:11" rel="footnote"><span class="hint--top hint--rounded" aria-label="[蓝奏云下载 VScode](https://wwgb.lanzout.com/iL14b0q024tc)">[11]</span></a></sup></li><li>VScode安装说明书<sup id="fnref:12" class="footnote-ref"><a href="#fn:12" rel="footnote"><span class="hint--top hint--rounded" aria-label="[VScode 安装说明](https://zhuanlan.zhihu.com/p/87864677)">[12]</span></a></sup></li></ol></li></ol><h2 id="4-使用Visual-Studio进行开发"><a href="#4-使用Visual-Studio进行开发" class="headerlink" title="4.使用Visual Studio进行开发"></a>4.使用Visual Studio进行开发</h2><p><strong>优点：</strong></p><ul><li>开发效率高</li><li>大型项目开发起来更加方便</li><li>支持git,可多人协作开发</li><li>无需自己配置cpp运行环境，编译器会自动安装所需环境<br><strong>缺点：</strong></li><li>太过重量级，比较吃电脑配置</li><li>软件界面复杂，需要一定软件操作学习成本</li></ul><ol><li>官网下载<sup id="fnref:13" class="footnote-ref"><a href="#fn:13" rel="footnote"><span class="hint--top hint--rounded" aria-label="[Visual Studio 官网下载](https://visualstudio.microsoft.com/zh-hans/downloads/)">[13]</span></a></sup></li></ol><h1 id="Linux-用户"><a href="#Linux-用户" class="headerlink" title="Linux 用户"></a>Linux 用户</h1><p>待续。。。</p><section class="footnotes"><div class="footnote-list"><ol><li><span id="fn:1" class="footnote-text"><span><a href="https://wwgb.lanzout.com/iUUBn0pz26xc">DEV-CPP 蓝奏云下载</a><a href="#fnref:1" rev="footnote" class="footnote-backref"> ↩</a></span></span></li><li><span id="fn:2" class="footnote-text"><span><a href="https://wwgb.lanzout.com/i3p4L0pz260j">Code::Blocks 蓝奏云安装包</a><a href="#fnref:2" rev="footnote" class="footnote-backref"> ↩</a></span></span></li><li><span id="fn:3" class="footnote-text"><span><a href="https://www.codeblocks.org/downloads/binaries/">Code::Blocks 官网下载</a><a href="#fnref:3" rev="footnote" class="footnote-backref"> ↩</a></span></span></li><li><span id="fn:4" class="footnote-text"><span><a href="https://blog.csdn.net/qq_41594445/article/details/102941354">如何在Windows上安装 Dev-Cpp</a><a href="#fnref:4" rev="footnote" class="footnote-backref"> ↩</a></span></span></li><li><span id="fn:5" class="footnote-text"><span><a href="https://www.jianshu.com/p/685f5f1e247f">如何在Windows上安装 Code::Blocks</a><a href="#fnref:5" rev="footnote" class="footnote-backref"> ↩</a></span></span></li><li><span id="fn:6" class="footnote-text"><span><a href="">如何在Linux上安装 Code::Blocks</a><a href="#fnref:6" rev="footnote" class="footnote-backref"> ↩</a></span></span></li><li><span id="fn:7" class="footnote-text"><span><a href="https://winlibs.com/">MinGW-w64 官网下载</a><a href="#fnref:7" rev="footnote" class="footnote-backref"> ↩</a></span></span></li><li><span id="fn:8" class="footnote-text"><span><a href="https://wwgb.lanzout.com/i8rnr0pz88sf">MinGW-w64 32位 蓝奏云下载</a><a href="#fnref:8" rev="footnote" class="footnote-backref"> ↩</a></span></span></li><li><span id="fn:9" class="footnote-text"><span><a href="https://linux.cn/article-13484-1.html">如何在Ubantu上安装 Code::Blocks</a><a href="#fnref:9" rev="footnote" class="footnote-backref"> ↩</a></span></span></li><li><span id="fn:10" class="footnote-text"><span><a href="https://code.visualstudio.com/Download">官网下载 VScode</a><a href="#fnref:10" rev="footnote" class="footnote-backref"> ↩</a></span></span></li><li><span id="fn:11" class="footnote-text"><span><a href="https://wwgb.lanzout.com/iL14b0q024tc">蓝奏云下载 VScode</a><a href="#fnref:11" rev="footnote" class="footnote-backref"> ↩</a></span></span></li><li><span id="fn:12" class="footnote-text"><span><a href="https://zhuanlan.zhihu.com/p/87864677">VScode 安装说明</a><a href="#fnref:12" rev="footnote" class="footnote-backref"> ↩</a></span></span></li><li><span id="fn:13" class="footnote-text"><span><a href="https://visualstudio.microsoft.com/zh-hans/downloads/">Visual Studio 官网下载</a><a href="#fnref:13" rev="footnote" class="footnote-backref"> ↩</a></span></span></li></ol></div></section>]]></content>
    
    
    <categories>
      
      <category>C++</category>
      
    </categories>
    
    
    <tags>
      
      <tag>C++</tag>
      
      <tag>基础</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>为什么选择使用C++</title>
    <link href="/2023/03/13/01_%E7%BC%96%E7%A8%8B%E7%9B%B8%E5%85%B3/01_c++/1.1%20c++%E7%AE%80%E4%BB%8B/"/>
    <url>/2023/03/13/01_%E7%BC%96%E7%A8%8B%E7%9B%B8%E5%85%B3/01_c++/1.1%20c++%E7%AE%80%E4%BB%8B/</url>
    
    <content type="html"><![CDATA[<p>任何一家追求软件和系统效率的公司，一定会采用C++开发！它的效率是其他语言无法媲美的。</p><span id="more"></span><h1 id="什么是C-？"><a href="#什么是C-？" class="headerlink" title="什么是C++？"></a>什么是C++？</h1><p>为了了解到为什么大型互联网公司都会采用C++进行软件和系统的开发，我们必须了解到什么是C++。</p><blockquote><p>C++ 是一种静态类型的、编译式的、通用的、大小写敏感的、不规则的编程语言，支持过程化编程、面向对象编程和泛型编程。 </p><p>C++ 被认为是一种中级语言，它综合了高级语言和低级语言的特点。</p><p>C++ 是由 Bjarne Stroustrup 于 1979 年在新泽西州美利山贝尔实验室开始设计开发的。C++ 进一步扩充和完善了 C 语言，最初命名为带类的C，后来在 1983 年更名为 C++。</p><p>C++ 是 C 的一个超集，事实上，任何合法的 C 程序都是合法的 C++ 程序。</p><p>注意：使用静态类型的编程语言是在编译时执行类型检查，而不是在运行时执行类型检查。<sup id="fnref:1" class="footnote-ref"><a href="#fn:1" rel="footnote"><span class="hint--top hint--rounded" aria-label="[菜鸟教程](https://www.runoob.com/cplusplus/cpp-intro.html)">[1]</span></a></sup></p></blockquote><p>简单来说，C++是一种使用广泛，在编译时执行类型检查的扩展C语言。</p><h1 id="C-那么好用，都有哪些行业在用C-呢？"><a href="#C-那么好用，都有哪些行业在用C-呢？" class="headerlink" title="C++那么好用，都有哪些行业在用C++呢？"></a>C++那么好用，都有哪些行业在用C++呢？</h1><ol><li>游戏行业</li><li>金融领域</li><li>HPC（高效能运算）</li><li>服务器软件</li><li>实时系统</li><li>嵌入式系统</li><li>数据库开发</li></ol><p>从C++的使用领域来看，我们发现，凡是严格需要效率的复杂系统，C++几乎就是唯一的选择。</p><section class="footnotes"><div class="footnote-list"><ol><li><span id="fn:1" class="footnote-text"><span><a href="https://www.runoob.com/cplusplus/cpp-intro.html">菜鸟教程</a><a href="#fnref:1" rev="footnote" class="footnote-backref"> ↩</a></span></span></li></ol></div></section>]]></content>
    
    
    <categories>
      
      <category>C++</category>
      
    </categories>
    
    
    <tags>
      
      <tag>C++</tag>
      
      <tag>基础</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
